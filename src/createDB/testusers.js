const http = require('http');
const hostname = '0.0.0.0';
const port = 3010;
const oracledb = require('oracledb');
const dbConfig = require('../dbconfig.js');
let connection;
const server = http.createServer((req, res) => {});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
  con();
  
});

async function con() {
    try {
      // Get a non-pooled connection
      connection = await oracledb.getConnection(dbConfig);
      
      // Create a table
      await connection.execute(
        `BEGIN
           EXECUTE IMMEDIATE 'DROP TABLE testusers';
           EXCEPTION
           WHEN OTHERS THEN
             IF SQLCODE NOT IN (-00942) THEN
               RAISE;
             END IF;
         END;`);
        
      await connection.execute(
        `declare
         v_sql LONG;
         begin
         v_sql:='CREATE TABLE testusers (id NUMBER GENERATED by default on null as IDENTITY(START with 1 INCREMENT by 1), 
          nombre VARCHAR2(128),
          correo VARCHAR2(128),
          edad NUMBER,
          pass VARCHAR2(64))';
         execute immediate v_sql;
         
         EXCEPTION
          WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
              NULL; -- suppresses ORA-00955 exception
            ELSE
              RAISE;
            END IF;
         END;
         `);
/*
      // Insert some data

      sql = `INSERT INTO testusers VALUES (:1, :2)`;

      binds = [
        [101, "Alpha"],
        [102, "Beta"],
        [103, "ratchet"],
        [104, "ratchet"]
      ];

      // For a complete list of options see the documentation.
      options = {
        autoCommit: true,
        // batchErrors: true,  // continue processing even if there are data errors
        bindDefs: [{
            type: oracledb.NUMBER
          },
          {
            type: oracledb.STRING,
            maxSize: 20
          }
        ]
      };

      result = await connection.executeMany(sql, binds, options);

      console.log("Number of rows inserted:", result.rowsAffected);
      */
      // Query the data

      sql = `SELECT * FROM testusers`;

      binds = {};

      // For a complete list of options see the documentation.
      options = {
        outFormat: oracledb.OUT_FORMAT_OBJECT // query result format
        // extendedMetaData: true,   // get extra metadata
        // fetchArraySize: 100       // internal buffer allocation size for tuning
      };

      result = await connection.execute(sql, binds, options);

      console.log("Column metadata: ", result.metaData);
      console.log("Query results: ");
      console.log(result.rows);
      console.log('Connection was successful!');
      server.close();
    } catch (err) {
      console.error(err);
    } finally {

      if (connection) {
        try {
          await connection.close();
        } catch (err) {
          console.error(err);
        }
      }

    }
  }
    